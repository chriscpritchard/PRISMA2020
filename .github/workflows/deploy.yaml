on:
  release:
    types: [released]
  pull_request:
    types: [assigned, opened, synchronize, reopened]
    branches:
      - main
      - master
      - actions-update
  push:
    branches:
      - main
      - master
      - actions-update
  workflow_dispatch:
  
name: Check and Deploy
jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (${{ matrix.config.r }})
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}
          - {os: macOS-latest, r: 'release'}
          - {os: ubuntu-latest, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          - {os: ubuntu-latest, r: 'devel', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
      - uses: r-lib/actions/setup-pandoc@v2
      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}
      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-
      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: |
            rcmdcheck
      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}
      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check

  pkgdown:
    needs: R-CMD-check
    runs-on: macOS-latest
    if: github.event_name == 'push'
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - uses: r-lib/actions/setup-r@v1
      - uses: r-lib/actions/setup-pandoc@v1
      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}
      - name: Restore R package cache
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-
      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          install.packages("pkgdown", type = "binary")
        shell: Rscript {0}
      - name: Install package
        run: R CMD INSTALL .
      - name: Deploy package
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          Rscript -e 'pkgdown::deploy_to_branch(new_process = FALSE)'
  
  deployment_release:
    needs: R-CMD-check
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    environment: 
      name: Release
    env:
      SHINY_ACC_NAME: ${{secrets.SHINY_ACC_NAME}}
      SHINY_APP_NAME: ${{secrets.SHINY_APP_NAME}}
      TOKEN: ${{secrets.TOKEN}}
      SECRET: ${{secrets.SECRET}}
      ANALYTICS: TRUE
      ANALYTICS_JS: ${{secrets.ANALYTICS_JS}}
      ANALYTICS_JS_FN: analytics.js
      ANALYTICS_ID: ${{secrets.ANALYTICS_ID}}
      ANALYTICS_HOST: ${{secrets.ANALYTICS_HOST}}
      GITHUB_PAT: ${{secrets.GITHUB_TOKEN}}
      DEPLOY_REPO: ${{github.repository}}
      DEPLOY_REF: ${{github.ref}}
      SHINY_APP_WORKING_DIRECTORY: ./inst/shiny-examples/PRISMA_flowdiagram
    steps:
      - uses: actions/checkout@v2
      - name: deploy release
        uses: ./.github/actions/deploy-shinyapps-
        
  deployment_latest:
    needs: R-CMD-check
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    environment: 
      name: Latest
    env:
      SHINY_ACC_NAME: ${{secrets.SHINY_ACC_NAME}}
      SHINY_APP_NAME: ${{secrets.SHINY_APP_NAME}}
      TOKEN: ${{secrets.TOKEN}}
      SECRET: ${{secrets.SECRET}}
      ANALYTICS: TRUE
      ANALYTICS_JS: ${{secrets.ANALYTICS_JS}}
      ANALYTICS_JS_FN: analytics.js
      ANALYTICS_ID: ${{secrets.ANALYTICS_ID}}
      ANALYTICS_HOST: ${{secrets.ANALYTICS_HOST}}
      GITHUB_PAT: ${{secrets.GITHUB_TOKEN}}
      DEPLOY_REPO: ${{github.repository}}
      DEPLOY_REF: ${{github.ref}}
      SHINY_APP_WORKING_DIRECTORY: ./inst/shiny-examples/PRISMA_flowdiagram
    steps:
      - uses: actions/checkout@v2
      - name: deploy latest
        uses: ./.github/actions/deploy-shinyapps-io